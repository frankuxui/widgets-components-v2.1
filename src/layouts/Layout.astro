---
interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>

	<script>
		const themeToggle = document.querySelector('#theme-toggle');
		const prefersDark = window.matchMedia('(prefers-color-scheme: dark)');
		const prefersLight = window.matchMedia('(prefers-color-scheme: light)');
		const prefersNone = window.matchMedia('(prefers-color-scheme: no-preference)');

		const setTheme = (theme) => {
			if (theme === 'dark') {
				document.documentElement.classList.add('dark');
				document.documentElement.classList.remove('light');
			} else {
				document.documentElement.classList.add('light');
				document.documentElement.classList.remove('dark');
			}
		};

		if (prefersDark.matches) {
			setTheme('dark');
		} else if (prefersLight.matches) {
			setTheme('light');
		} else if (prefersNone.matches) {
			setTheme('light');
		}

		// Save the user's theme preference to localStorage

		const savedTheme = localStorage.getItem('theme');

		if (savedTheme) {
			setTheme(savedTheme);
		}

		themeToggle.addEventListener('change', (e) => {
			if ((e.target as HTMLInputElement).checked) {
				setTheme('dark');
				localStorage.setItem('theme', 'dark');
			} else {
				setTheme('light');
				localStorage.setItem('theme', 'light');
			}
		});

		prefersDark.addEventListener('change', (e) => {
			if (e.matches) {
				setTheme('dark');
			}
		});

		prefersLight.addEventListener('change', (e) => {
			if (e.matches) {
				setTheme('light');
			}
		});

		prefersNone.addEventListener('change', (e) => {
			if (e.matches) {
				setTheme('light');
			}
		});

		
		// Filter widgets categories

		const filter = document.querySelector('#filter');

		const widgets = document.querySelectorAll('[data-filter]');
		const widgetCategories = Array.from(widgets).map((widget) => (widget as HTMLElement).dataset.filter);
		const uniqueWidgetCategories = [...new Set(widgetCategories)];
		
		uniqueWidgetCategories.forEach((category) => {
			const option = document.createElement('option');

			if (category.length > 0) {
				option.value = category;
				option.textContent = category;
				filter.appendChild(option);
			}

			return option;
		});

		filter.addEventListener('change', (e) => {
			const selectedCategory = (e.target as HTMLSelectElement).value;

			widgets.forEach((widget) => {
				if (selectedCategory === 'all') {
					widget.classList.remove('hidden');
				} else if ((widget as HTMLElement).dataset.filter === selectedCategory) {
					widget.classList.remove('hidden');
				} else {
					widget.classList.add('hidden');
				}
			});
		});
		
	</script>

	<body>
		<section class="mx-auto px-6 w-full max-w-[145rem]">
			<header>
				<input type="checkbox" id="theme-toggle" />
				<label for="theme-toggle">Toggle theme</label>
			</header>
			<select id="filter">
				<option value="all">All</option>
			</select>
		</section>
		<main class="">
			<slot />
		</main>
	</body>
</html>

<style is:global>
	@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700;900&display=swap');

	/*
	px-6 mt-16 py-20 box-border m-auto w-full lg:max-w-full max-w-[75rem] xl:max-w-[85rem] 3xl:max-w-[120rem] 4xl:max-w-[145rem] columns-1xs sm:columns-2xs md:columns-2 lg:columns-3 xl:columns-4 3xl:columns-6 4xl:columns-7
	*/
	:root {
		--dark-bg: theme('colors.gray.950');
		--light-bg: #ffffff;
	}
	body {
		font-family: 'Roboto', sans-serif;
		background: var(--light-bg);
	}
	.dark body {
		background: var(--dark-bg);
	}
	.break-inside {
  	-moz-column-break-inside: avoid;
  	break-inside: avoid;
	}


	main {
		column-count: 1;
		column-gap: 0.75rem;
		padding: 0 0.75rem;
		margin: 0 auto;
		max-width: 100%;
	}

	@media screen and (980px >= width > 640px) {
		main {
			column-count: 2;
			max-width: 660px;
		}
	}

	@media screen and (1280px >= width > 980px) {
		main {
			column-count: 3;
			max-width: 980px;
		}
	}

	@media screen and (1600px >= width > 1280px) {
		main {
			column-count: 4;
			max-width: 1280px;
		}
	}

	@media screen and (1920px >= width > 1600px) {
		main {
			column-count: 5;
			max-width: 1600px;
		}
	}

	@media screen and (1920px >= width > 1600px) {
		main {
			column-count: 5;
			max-width: 1600px;
		}
	}
	
	@media screen and (2048px >= width > 1920px) {
		main {
			column-count: 6;
			max-width: 1920px;
		}
	}

	@media screen and (2460px >= width > 2048px) {
		main {
			column-count: 7;
			max-width: 2048px;
		}
	}

	@media screen and (2560px >= width > 2460px) {
		main {
			column-count: 8;
			max-width: 2460px;
		}
	}
</style>
