---
interface Props {
	title: string;
}

const { title } = Astro.props;

let pages = []
pages = await Astro.glob('../pages/categories/*.md')

const data = pages.map((item) => {
	const { category, title, slug, tags, visible } = item.frontmatter

	return {
		category,
		title,
		slug,
		tags,
		visible
	}
})

const pageSlug = Astro.url.pathname.split('/')[2]

---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>

	<script>
		const themeToggle = document.querySelectorAll('[data-toggle="theme"]');
import { navigate } from "astro:transitions/client";
		const prefersDark = window.matchMedia('(prefers-color-scheme: dark)');
		const prefersLight = window.matchMedia('(prefers-color-scheme: light)');
		const prefersNone = window.matchMedia('(prefers-color-scheme: no-preference)');

		const setTheme = (theme: string) => {
			if (theme === 'dark') {
				document.documentElement.classList.add('dark');
				document.documentElement.classList.remove('light');
				themeToggle.forEach((toggle) => {
					(toggle as HTMLInputElement).checked = true;
				});
			} else {
				document.documentElement.classList.add('light');
				document.documentElement.classList.remove('dark');
				themeToggle.forEach((toggle) => {
					(toggle as HTMLInputElement).checked = false;
				});	
			}
		};

		if (prefersDark.matches) {
			setTheme('dark');
		}
		if (prefersLight.matches) {
			setTheme('light');
		}
		if (prefersNone.matches) {
			setTheme('light');
		}

		// Save the user's theme preference to localStorage

		const savedTheme = localStorage.getItem('theme');

		if (savedTheme) {
			setTheme(savedTheme);
		}

		themeToggle.forEach((toggle) => {
			toggle.addEventListener('change', (e: Event) => {
				const isChecked = (e.target as HTMLInputElement).checked;
				const theme = localStorage.getItem('theme');

				if (theme === 'dark') {
					localStorage.setItem('theme', 'light');
					setTheme('light');
				} else {
					localStorage.setItem('theme', 'dark');
					setTheme('dark');
				}
			});
		});

		prefersDark.addEventListener('change', (e) => {
			if (e.matches) {
				setTheme('dark');
			}
		});

		prefersLight.addEventListener('change', (e) => {
			if (e.matches) {
				setTheme('light');
			}
		});

		prefersNone.addEventListener('change', (e) => {
			if (e.matches) {
				setTheme('light');
			}
		});

		

		
		// Filter widgets categories

		/*

		const filter = document.querySelector('#filter');

		const widgets = document.querySelectorAll('[data-filter]');
		const widgetCategories = Array.from(widgets).map((widget) => (widget as HTMLElement).dataset.filter);
		const uniqueWidgetCategories = [...new Set(widgetCategories)];
		
		uniqueWidgetCategories.forEach((category) => {
			const option = document.createElement('option');

			if (category.length > 0) {
				option.value = category;
				option.textContent = category;
				filter.appendChild(option);
			}

			return option;
		});

		filter.addEventListener('change', (e) => {
			const selectedCategory = (e.target as HTMLSelectElement).value;

			widgets.forEach((widget) => {
				if (selectedCategory === 'all') {
					widget.classList.remove('hidden');
				} else if ((widget as HTMLElement).dataset.filter === selectedCategory) {
					widget.classList.remove('hidden');
				} else {
					widget.classList.add('hidden');
				}
			});
		});
		
		*/

		// Aside toggle

		const asideToggle = document.querySelectorAll('[data-toggle="aside"]');
		const asideContent = document.querySelector('.aside-content') as HTMLElement;
		const aside = document.querySelector('aside');

		asideToggle.forEach((toggle) => {
			toggle.addEventListener('click', () => {
				if (aside.style.display === 'none') {
					aside.style.display = 'block';
					document.body.style.overflow = 'hidden';
					setTimeout(() => {
						asideContent.style.transform = 'translateX(0)';
					}, 100);
				} else {
					asideContent.style.transform = 'translateX(-100%)';
					document.body.style.overflow = 'auto';
					setTimeout(() => {
						aside.style.display = 'none';
					}, 300);
				}
			});
		});
		

		// Menu more toggle

		const menuMoreToggle = document.querySelectorAll('[data-toggle="menu-more"]');
		const menuDropdown = document.querySelectorAll('.menu-dropdown');
		
		menuMoreToggle.forEach((toggle) => {
			toggle.addEventListener('click', () => {
				const dropdown = toggle.nextElementSibling as HTMLElement;

				if (dropdown.style.display === 'none') {
					dropdown.style.display = 'block';
				} else {
					dropdown.style.display = 'none';
				}
			});
		});

		// Close menu more dropdown when clicking outside of it

		document.addEventListener('click', (e) => {
			menuMoreToggle.forEach((item) => {
				if (!item.contains(e.target as Node)) {
					menuDropdown.forEach((dropdown) => {
						(dropdown as HTMLElement).style.display = 'none';
					});
				}
			});
		});

		// Close menu more dropdown when clicking the escape key

		document.addEventListener('keydown', (e) => {
			if (e.key === 'Escape') {
				menuDropdown.forEach((dropdown) => {
					(dropdown as HTMLElement).style.display = 'none';
				});
			}
		});

		
		
	</script>

	<body>

		<header class="z-30 sticky top-0 py-4 bg-white dark:bg-gray-950">
			<div class="flex items-center justify-between container">
				<h1 class="flex-none text-xl md:text-2xl xl:text-3xl font-bold dark:text-white">Widgets</h1>
				<ul class="hidden lg:flex items-center justify-center gap-4 w-full">
					{
						data.map((item, index) => {
							if (!item.visible) {
								return (
									<li class="relative">
										<button data-toggle="menu-more" class="flex items-center justify-center w-10 h-10 flex-none transition-colors duration-300 rounded-full hover:bg-gray-200 dark:hover:bg-gray-900 dark:text-white focus:bg-gray-300 dark:focus:bg-gray-700" >
											<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="1"></circle><circle cx="19" cy="12" r="1"></circle><circle cx="5" cy="12" r="1"></circle></svg>
										</button>
										<div 
											class="menu-dropdown flex flex-col absolute mt-2 top-full left-1/2 -translate-x-1/2 w-full min-w-[15rem]"
											style="display: none;"
										>
											<div class="border p-4 rounded shadow-xl bg-white dark:bg-gray-800 dark:border-gray-800">
												{
													data.filter((item) => item.visible === false).map((item) => {
														return (
															<a 
																href={`/categories/${item.slug}`}
																class="relative block py-2 px-4 w-full rounded transition-colors duration-200"
																class:list={{
																	'text-gray-600 hover:text-black hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-white/5 dark:hover:text-white': pageSlug !== item.slug,
																	'text-black font-bold dark:text-white hover:bg-black/5 dark:hover:bg-white/5': pageSlug === item.slug
																}}
																>
																{item.category}
															</a>
														)
													})
												}
											</div>
										</div>
									</li>
								)
							}
							return (
								<li>
									<a 
										href={`/categories/${item.slug}`}
										class="flex items-center justify-center uppercase text-sm tracking-wider rounded-sm transition-colors duration-200"
										class:list={{
											'font-medium hover:text-black text-gray-600 dark:text-gray-500 dark:hover:text-gray-400': pageSlug !== item.slug,
											'font-extrabold text-black dark:text-white': pageSlug === item.slug
										}}
										>
										{item.category}
									</a>
								</li>
							)
						})
					}
				</ul>
				<div class="flex items-center flex-none gap-4">
					<label class="relative inline-flex items-center cursor-pointer">
						<input type="checkbox" class="sr-only peer" data-toggle="theme" />
						<div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-800 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
					</label>
					<!-- Menu button -->
					<button data-toggle="aside" class="flex lg:hidden items-center justify-center w-10 h-10 flex-none transition-colors duration-300 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700 dark:text-white">
						<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="3" y1="12" x2="21" y2="12"></line><line x1="3" y1="6" x2="21" y2="6"></line><line x1="3" y1="18" x2="21" y2="18"></line></svg>
					</button>
					<!-- End menu button -->
				</div>
				

			</div>
		</header>
		<main class="mt-8">
			<slot />
		</main>

		<aside
			class="fixed top-0 left-0 h-full w-full z-50"
			style="display: none;"
		>
			<div data-toggle="aside" class="absolute top-0 left-0 w-full h-full bg-black bg-opacity-70 backdrop-blur"></div>

			<div 
				class="aside-content relative flex flex-col w-full h-full max-w-xs z-10 bg-white"
				style="transition: transform 200ms ease-in-out; transform: translateX(-100%);"
			>
				<header class="w-full flex items-center justify-between px-6 p-4 border-b">
					<h2 class="text-lg font-medium">Widgets</h2>

					<!-- Close button -->
					<button data-toggle="aside" class="flex lg:hidden items-center justify-center w-9 h-9 flex-none transition-colors duration-300 text-black rounded-full hover:bg-gray-200">
						<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>
					</button>
					<!-- End close button -->

				</header>
				<section class="flex-1 py-8 px-6 overflow-y-auto">
					<h2 class="text-lg font-medium">Categories</h2>
					<ul class="flex flex-col w-full mt-4">
						{
							data.map((item) => {
								return (
									<li>
										<a 
											href={`/categories/${item.slug}`}
											class="relative block py-2 w-full rounded transition-colors duration-200"
											class:list={{
												'text-gray-600 hover:text-black': pageSlug !== item.slug,
												'text-black font-bold': pageSlug === item.slug
											}}
											>
											{item.category}
										</a>
									</li>
								)
							})
						}
					</ul>
				</section>

				<footer class="flex items-center justify-between w-full bg-gray-50 py-8 px-6">
					<h2 class="text-base font-medium">Settings</h2>
					<!-- Theme toggle -->
					<label class="relative inline-flex items-center cursor-pointer">
						<input type="checkbox" value="" class="sr-only peer" data-toggle="theme">
						<div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
					</label>
					<!-- End theme toggle -->

				</footer>
			</div>
		</aside>
	</body>
</html>

<style is:global>
	@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700;900&display=swap');

	/*
	px-6 mt-16 py-20 box-border m-auto w-full lg:max-w-full max-w-[75rem] xl:max-w-[85rem] 3xl:max-w-[120rem] 4xl:max-w-[145rem] columns-1xs sm:columns-2xs md:columns-2 lg:columns-3 xl:columns-4 3xl:columns-6 4xl:columns-7
	*/
	:root {
		--dark-bg: theme('colors.gray.950');
		--light-bg: #ffffff;
	}
	body {
		font-family: 'Roboto', sans-serif;
		background: var(--light-bg);
	}
	.dark body {
		background: var(--dark-bg);
	}
	.break-inside {
  	-moz-column-break-inside: avoid;
  	break-inside: avoid;
	}


	main {
		column-count: 1;
		column-gap: 0.75rem;
		padding: 0 1.5rem;
		margin: 0 auto;
		max-width: 100%;
	}
	.container {
		padding: 0 1.5rem;
		margin: 0 auto;
		width: 100%;
		max-width: 100%;
	}


	@media screen and (980px >= width > 640px) {
		main {
			column-count: 2;
			max-width: 660px;
		}
		.container {
			max-width: 660px;
		}
	}

	@media screen and (1280px >= width > 980px) {
		main {
			column-count: 3;
			max-width: 980px;
		}
		.container {
			max-width: 980px;
		}
	}

	@media screen and (1600px >= width > 1280px) {
		main {
			column-count: 4;
			max-width: 1340px;
		}
		.container {
			max-width: 1340px;
		}
	}

	@media screen and (1920px >= width > 1600px) {
		main {
			column-count: 5;
			max-width: 1600px;
		}
		.container {
			max-width: 1600px;
		}
	}

	@media screen and (1920px >= width > 1600px) {
		main {
			column-count: 5;
			max-width: 1600px;
		}
	}
	
	@media screen and (2048px >= width > 1920px) {
		main {
			column-count: 6;
			max-width: 1920px;
		}
		.container {
			max-width: 1920px;
		}
	}

	@media screen and (2460px >= width > 2048px) {
		main {
			column-count: 7;
			max-width: 2048px;
		}
		.container {
			max-width: 2048px;
		}
	}

	@media screen and (2560px >= width > 2460px) {
		main {
			column-count: 8;
			max-width: 2460px;
		}
		.container {
			max-width: 2460px;
		}
	}

	@keyframes shake {
		0%{
			transform: translate3d(-4px, 0, 0);	
		},
		100% {
			transform: translate3d(4px, 0, 0);	
		}
	}

	.switch {
  	@apply relative flex-none cursor-pointer h-5 px-1 w-10 appearance-none rounded-full bg-gray-300;
	}
	.switch:before{
		@apply transition-transform duration-200 pointer-events-none absolute top-1/2 -translate-y-1/2 h-4 w-4 rounded-full bg-transparent content-[''] transform translate-x-0 bg-white;
	}
	.switch:focus{
		@apply bg-gray-400;
	}
	.switch:checked{
		@apply bg-blue-600;
	}
	.switch:checked:before{
		@apply translate-x-full bg-white ;
	}

	/* Primary */

	.switch.switch-primary:checked {
		@apply bg-blue-600
	}

	/* Dark */

	.switch.switch-dark:checked {
		@apply bg-black;
	}

	/* Light */

	.switch.switch-light:checked {
		@apply bg-white;
	}
	.switch.switch-light:checked:before {
		@apply bg-black;
	}

	/* xs */

	.switch-xs {
		@apply h-[16px] px-[3px] w-[30px];
	}
	.switch-xs:before{
		@apply h-[12px] w-[12px];
	}

	/* sm */

	.switch-sm {
		@apply h-[18px] px-[3px] w-[34px];
	}
	.switch-sm:before{
		@apply h-[14px] w-[14px];
	}

	/* md */

	.switch-md {
		@apply h-[20px] px-[3px] w-[40px];
	}
	.switch-md:before{
		@apply h-[16px] w-[16px];
	}

	/* lg */

	.switch-lg {
		@apply h-[24px] px-[3px] w-[48px];
	}
	.switch-lg:before{
		@apply h-[20px] w-[20px];
	}

	/* xl */

	.switch-xl {
		@apply h-[28px] px-[3px] w-[56px];
	}
	.switch-xl:before{
		@apply h-[24px] w-[24px];
	}

	.switch:disabled, .switch[disabled], .switch.input-disabled {
		@apply pointer-events-none cursor-default opacity-40;
	}


	
</style>
